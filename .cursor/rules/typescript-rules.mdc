---
description: 
globs: 
alwaysApply: false
---
# TypeScript Rules

## Type Definitions
- Always define interfaces for component props
- Use discriminated unions for complex type hierarchies
- Prefer interfaces over type aliases for object types
- Use type guards for runtime type checking
- Define base interfaces for shared properties

## Type Safety
- Enable strict mode in tsconfig.json
- Use const assertions for literal types
- Avoid any type unless absolutely necessary
- Use unknown instead of any for unknown types
- Properly type event handlers and callbacks

## Component Types
- Define proper types for all component props
- Use React.FC or proper function component types
- Type all event handlers and callbacks
- Use proper types for hooks and their return values
- Type all state variables and their setters

## Data Types
- Define proper types for API responses
- Use proper types for form data
- Type all database models and queries
- Use proper types for analytics data
- Define proper types for configuration objects

## Best Practices
- Use type inference where possible
- Avoid type assertions unless necessary
- Use proper generic types
- Document complex types with JSDoc
- Keep type definitions close to their usage

## Error Prevention
- Use proper error types
- Type all error handlers
- Use proper types for async operations
- Type all API responses
- Use proper types for state management

## Type Checking
- Enable all strict type checking options
- Use proper type guards
- Type all function parameters
- Type all return values
- Use proper types for conditional rendering 